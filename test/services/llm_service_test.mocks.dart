// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_voice_friend/test/services/llm_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i16;

import 'package:flutter_voice_friend/models/activity.dart' as _i10;
import 'package:flutter_voice_friend/services/audio_service.dart' as _i17;
import 'package:flutter_voice_friend/services/session_service.dart' as _i18;
import 'package:flutter_voice_friend/services/user_service.dart' as _i15;
import 'package:flutter_voice_friend/utils/llm_chain.dart' as _i14;
import 'package:flutter_voice_friend/utils/tts_openai_interface.dart' as _i11;
import 'package:isar/isar.dart' as _i12;
import 'package:langchain/langchain.dart' as _i9;
import 'package:langchain_core/src/runnables/binding.dart' as _i6;
import 'package:langchain_core/src/runnables/fallbacks.dart' as _i7;
import 'package:langchain_core/src/runnables/runnable.dart' as _i3;
import 'package:langchain_core/src/runnables/sequence.dart' as _i5;
import 'package:langchain_core/src/runnables/types.dart' as _i1;
import 'package:langchain_openai/langchain_openai.dart' as _i8;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRunnable_0<
        RunInput1 extends Object?,
        CallOptions extends _i1.RunnableOptions,
        RunOutput1 extends Object?> extends _i2.SmartFake
    implements _i3.Runnable<RunInput1, CallOptions, RunOutput1> {
  _FakeRunnable_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRunnableOptions_1 extends _i2.SmartFake
    implements _i1.RunnableOptions {
  _FakeRunnableOptions_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T> extends _i2.SmartFake implements _i4.Future<T> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRunnableSequence_3<RunInput1 extends Object?,
        RunOutput1 extends Object?> extends _i2.SmartFake
    implements _i5.RunnableSequence<RunInput1, RunOutput1> {
  _FakeRunnableSequence_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRunnableBinding_4<
        RunInput1 extends Object?,
        CallOptions extends _i1.RunnableOptions,
        RunOutput1 extends Object?> extends _i2.SmartFake
    implements _i6.RunnableBinding<RunInput1, CallOptions, RunOutput1> {
  _FakeRunnableBinding_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRunnableWithFallback_5<RunInput1 extends Object?,
        RunOutput1 extends Object?> extends _i2.SmartFake
    implements _i7.RunnableWithFallback<RunInput1, RunOutput1> {
  _FakeRunnableWithFallback_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChatOpenAI_6 extends _i2.SmartFake implements _i8.ChatOpenAI {
  _FakeChatOpenAI_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConversationChain_7 extends _i2.SmartFake
    implements _i9.ConversationChain {
  _FakeConversationChain_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActivity_8 extends _i2.SmartFake implements _i10.Activity {
  _FakeActivity_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextToSpeechOpenAI_9 extends _i2.SmartFake
    implements _i11.TextToSpeechOpenAI {
  _FakeTextToSpeechOpenAI_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIsar_10 extends _i2.SmartFake implements _i12.Isar {
  _FakeIsar_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RunnableSequence].
///
/// See the documentation for Mockito's code generation for more information.
class MockRunnableSequence<RunInput extends Object?, RunOutput extends Object?>
    extends _i2.Mock implements _i5.RunnableSequence<RunInput, RunOutput> {
  @override
  _i3.Runnable<RunInput, _i1.RunnableOptions, Object?> get first =>
      (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _FakeRunnable_0<RunInput, _i1.RunnableOptions, Object?>(
          this,
          Invocation.getter(#first),
        ),
        returnValueForMissingStub:
            _FakeRunnable_0<RunInput, _i1.RunnableOptions, Object?>(
          this,
          Invocation.getter(#first),
        ),
      ) as _i3.Runnable<RunInput, _i1.RunnableOptions, Object?>);

  @override
  List<_i3.Runnable<Object?, _i1.RunnableOptions, Object?>> get middle =>
      (super.noSuchMethod(
        Invocation.getter(#middle),
        returnValue: <_i3.Runnable<Object?, _i1.RunnableOptions, Object?>>[],
        returnValueForMissingStub: <_i3
            .Runnable<Object?, _i1.RunnableOptions, Object?>>[],
      ) as List<_i3.Runnable<Object?, _i1.RunnableOptions, Object?>>);

  @override
  _i3.Runnable<Object?, _i1.RunnableOptions, RunOutput> get last =>
      (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _FakeRunnable_0<Object?, _i1.RunnableOptions, RunOutput>(
          this,
          Invocation.getter(#last),
        ),
        returnValueForMissingStub:
            _FakeRunnable_0<Object?, _i1.RunnableOptions, RunOutput>(
          this,
          Invocation.getter(#last),
        ),
      ) as _i3.Runnable<Object?, _i1.RunnableOptions, RunOutput>);

  @override
  List<_i3.Runnable<Object?, _i1.RunnableOptions, Object?>> get steps =>
      (super.noSuchMethod(
        Invocation.getter(#steps),
        returnValue: <_i3.Runnable<Object?, _i1.RunnableOptions, Object?>>[],
        returnValueForMissingStub: <_i3
            .Runnable<Object?, _i1.RunnableOptions, Object?>>[],
      ) as List<_i3.Runnable<Object?, _i1.RunnableOptions, Object?>>);

  @override
  _i1.RunnableOptions get defaultOptions => (super.noSuchMethod(
        Invocation.getter(#defaultOptions),
        returnValue: _FakeRunnableOptions_1(
          this,
          Invocation.getter(#defaultOptions),
        ),
        returnValueForMissingStub: _FakeRunnableOptions_1(
          this,
          Invocation.getter(#defaultOptions),
        ),
      ) as _i1.RunnableOptions);

  @override
  _i4.Future<RunOutput> invoke(
    RunInput? input, {
    _i1.RunnableOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [input],
          {#options: options},
        ),
        returnValue: _i13.ifNotNull(
              _i13.dummyValueOrNull<RunOutput>(
                this,
                Invocation.method(
                  #invoke,
                  [input],
                  {#options: options},
                ),
              ),
              (RunOutput v) => _i4.Future<RunOutput>.value(v),
            ) ??
            _FakeFuture_2<RunOutput>(
              this,
              Invocation.method(
                #invoke,
                [input],
                {#options: options},
              ),
            ),
        returnValueForMissingStub: _i13.ifNotNull(
              _i13.dummyValueOrNull<RunOutput>(
                this,
                Invocation.method(
                  #invoke,
                  [input],
                  {#options: options},
                ),
              ),
              (RunOutput v) => _i4.Future<RunOutput>.value(v),
            ) ??
            _FakeFuture_2<RunOutput>(
              this,
              Invocation.method(
                #invoke,
                [input],
                {#options: options},
              ),
            ),
      ) as _i4.Future<RunOutput>);

  @override
  _i4.Stream<RunOutput> stream(
    RunInput? input, {
    _i1.RunnableOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stream,
          [input],
          {#options: options},
        ),
        returnValue: _i4.Stream<RunOutput>.empty(),
        returnValueForMissingStub: _i4.Stream<RunOutput>.empty(),
      ) as _i4.Stream<RunOutput>);

  @override
  _i4.Stream<RunOutput> streamFromInputStream(
    _i4.Stream<RunInput>? inputStream, {
    _i1.RunnableOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamFromInputStream,
          [inputStream],
          {#options: options},
        ),
        returnValue: _i4.Stream<RunOutput>.empty(),
        returnValueForMissingStub: _i4.Stream<RunOutput>.empty(),
      ) as _i4.Stream<RunOutput>);

  @override
  _i5.RunnableSequence<RunInput, NewRunOutput> pipe<
              NewRunOutput extends Object?,
              NewCallOptions extends _i1.RunnableOptions>(
          _i3.Runnable<RunOutput, NewCallOptions, NewRunOutput>? next) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [next],
        ),
        returnValue: _FakeRunnableSequence_3<RunInput, NewRunOutput>(
          this,
          Invocation.method(
            #pipe,
            [next],
          ),
        ),
        returnValueForMissingStub:
            _FakeRunnableSequence_3<RunInput, NewRunOutput>(
          this,
          Invocation.method(
            #pipe,
            [next],
          ),
        ),
      ) as _i5.RunnableSequence<RunInput, NewRunOutput>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<RunOutput>> batch(
    List<RunInput>? inputs, {
    List<_i1.RunnableOptions>? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #batch,
          [inputs],
          {#options: options},
        ),
        returnValue: _i4.Future<List<RunOutput>>.value(<RunOutput>[]),
        returnValueForMissingStub:
            _i4.Future<List<RunOutput>>.value(<RunOutput>[]),
      ) as _i4.Future<List<RunOutput>>);

  @override
  _i6.RunnableBinding<RunInput, _i1.RunnableOptions, RunOutput> bind(
          _i1.RunnableOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [options],
        ),
        returnValue:
            _FakeRunnableBinding_4<RunInput, _i1.RunnableOptions, RunOutput>(
          this,
          Invocation.method(
            #bind,
            [options],
          ),
        ),
        returnValueForMissingStub:
            _FakeRunnableBinding_4<RunInput, _i1.RunnableOptions, RunOutput>(
          this,
          Invocation.method(
            #bind,
            [options],
          ),
        ),
      ) as _i6.RunnableBinding<RunInput, _i1.RunnableOptions, RunOutput>);

  @override
  _i7.RunnableWithFallback<RunInput, RunOutput> withFallbacks(
          List<_i3.Runnable<RunInput, _i1.RunnableOptions, RunOutput>>?
              fallbacks) =>
      (super.noSuchMethod(
        Invocation.method(
          #withFallbacks,
          [fallbacks],
        ),
        returnValue: _FakeRunnableWithFallback_5<RunInput, RunOutput>(
          this,
          Invocation.method(
            #withFallbacks,
            [fallbacks],
          ),
        ),
        returnValueForMissingStub:
            _FakeRunnableWithFallback_5<RunInput, RunOutput>(
          this,
          Invocation.method(
            #withFallbacks,
            [fallbacks],
          ),
        ),
      ) as _i7.RunnableWithFallback<RunInput, RunOutput>);
}

/// A class which mocks [LLMChainLibrary].
///
/// See the documentation for Mockito's code generation for more information.
class MockLLMChainLibrary extends _i2.Mock implements _i14.LLMChainLibrary {
  @override
  _i9.ConversationBufferWindowMemory get memory => (super.noSuchMethod(
        Invocation.getter(#memory),
        returnValue: _i13.dummyValue<_i9.ConversationBufferWindowMemory>(
          this,
          Invocation.getter(#memory),
        ),
        returnValueForMissingStub:
            _i13.dummyValue<_i9.ConversationBufferWindowMemory>(
          this,
          Invocation.getter(#memory),
        ),
      ) as _i9.ConversationBufferWindowMemory);

  @override
  set memory(_i9.ConversationBufferWindowMemory? _memory) => super.noSuchMethod(
        Invocation.setter(
          #memory,
          _memory,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.PromptTemplate get promptTemplate => (super.noSuchMethod(
        Invocation.getter(#promptTemplate),
        returnValue: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#promptTemplate),
        ),
        returnValueForMissingStub: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#promptTemplate),
        ),
      ) as _i9.PromptTemplate);

  @override
  set promptTemplate(_i9.PromptTemplate? _promptTemplate) => super.noSuchMethod(
        Invocation.setter(
          #promptTemplate,
          _promptTemplate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.PromptTemplate get memoryUserSummaryTemplate => (super.noSuchMethod(
        Invocation.getter(#memoryUserSummaryTemplate),
        returnValue: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#memoryUserSummaryTemplate),
        ),
        returnValueForMissingStub: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#memoryUserSummaryTemplate),
        ),
      ) as _i9.PromptTemplate);

  @override
  set memoryUserSummaryTemplate(
          _i9.PromptTemplate? _memoryUserSummaryTemplate) =>
      super.noSuchMethod(
        Invocation.setter(
          #memoryUserSummaryTemplate,
          _memoryUserSummaryTemplate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.PromptTemplate get memorySessionSummaryTemplate => (super.noSuchMethod(
        Invocation.getter(#memorySessionSummaryTemplate),
        returnValue: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#memorySessionSummaryTemplate),
        ),
        returnValueForMissingStub: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#memorySessionSummaryTemplate),
        ),
      ) as _i9.PromptTemplate);

  @override
  set memorySessionSummaryTemplate(
          _i9.PromptTemplate? _memorySessionSummaryTemplate) =>
      super.noSuchMethod(
        Invocation.setter(
          #memorySessionSummaryTemplate,
          _memorySessionSummaryTemplate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.PromptTemplate get memoryAllSessionSummaryTemplate => (super.noSuchMethod(
        Invocation.getter(#memoryAllSessionSummaryTemplate),
        returnValue: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#memoryAllSessionSummaryTemplate),
        ),
        returnValueForMissingStub: _i13.dummyValue<_i9.PromptTemplate>(
          this,
          Invocation.getter(#memoryAllSessionSummaryTemplate),
        ),
      ) as _i9.PromptTemplate);

  @override
  set memoryAllSessionSummaryTemplate(
          _i9.PromptTemplate? _memoryAllSessionSummaryTemplate) =>
      super.noSuchMethod(
        Invocation.setter(
          #memoryAllSessionSummaryTemplate,
          _memoryAllSessionSummaryTemplate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.ChatOpenAI get llm => (super.noSuchMethod(
        Invocation.getter(#llm),
        returnValue: _FakeChatOpenAI_6(
          this,
          Invocation.getter(#llm),
        ),
        returnValueForMissingStub: _FakeChatOpenAI_6(
          this,
          Invocation.getter(#llm),
        ),
      ) as _i8.ChatOpenAI);

  @override
  set llm(_i8.ChatOpenAI? _llm) => super.noSuchMethod(
        Invocation.setter(
          #llm,
          _llm,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.ConversationChain get llmChain => (super.noSuchMethod(
        Invocation.getter(#llmChain),
        returnValue: _FakeConversationChain_7(
          this,
          Invocation.getter(#llmChain),
        ),
        returnValueForMissingStub: _FakeConversationChain_7(
          this,
          Invocation.getter(#llmChain),
        ),
      ) as _i9.ConversationChain);

  @override
  set llmChain(_i9.ConversationChain? _llmChain) => super.noSuchMethod(
        Invocation.setter(
          #llmChain,
          _llmChain,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get template => (super.noSuchMethod(
        Invocation.getter(#template),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#template),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.getter(#template),
        ),
      ) as String);

  @override
  set template(String? _template) => super.noSuchMethod(
        Invocation.setter(
          #template,
          _template,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setTemplate(String? newTemplate) => super.noSuchMethod(
        Invocation.method(
          #setTemplate,
          [newTemplate],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.RunnableSequence<Object, String> getChain() => (super.noSuchMethod(
        Invocation.method(
          #getChain,
          [],
        ),
        returnValue: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getChain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getChain,
            [],
          ),
        ),
      ) as _i5.RunnableSequence<Object, String>);

  @override
  _i5.RunnableSequence<Object, String> getSummarizeUserChain() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSummarizeUserChain,
          [],
        ),
        returnValue: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getSummarizeUserChain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getSummarizeUserChain,
            [],
          ),
        ),
      ) as _i5.RunnableSequence<Object, String>);

  @override
  _i5.RunnableSequence<Object, String> getSummarizeSessionChain() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSummarizeSessionChain,
          [],
        ),
        returnValue: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getSummarizeSessionChain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getSummarizeSessionChain,
            [],
          ),
        ),
      ) as _i5.RunnableSequence<Object, String>);

  @override
  _i5.RunnableSequence<Object, String> getSummarizeAllSessionsChain() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSummarizeAllSessionsChain,
          [],
        ),
        returnValue: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getSummarizeAllSessionsChain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRunnableSequence_3<Object, String>(
          this,
          Invocation.method(
            #getSummarizeAllSessionsChain,
            [],
          ),
        ),
      ) as _i5.RunnableSequence<Object, String>);

  @override
  void updateMemory(
    dynamic input,
    dynamic output,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateMemory,
          [
            input,
            output,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearMemory() => super.noSuchMethod(
        Invocation.method(
          #clearMemory,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i2.Mock implements _i15.UserService {
  @override
  String get selectedLanguage => (super.noSuchMethod(
        Invocation.getter(#selectedLanguage),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedLanguage),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedLanguage),
        ),
      ) as String);

  @override
  set selectedLanguage(String? _selectedLanguage) => super.noSuchMethod(
        Invocation.setter(
          #selectedLanguage,
          _selectedLanguage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get selectedSpeechToTextMethod => (super.noSuchMethod(
        Invocation.getter(#selectedSpeechToTextMethod),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedSpeechToTextMethod),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedSpeechToTextMethod),
        ),
      ) as String);

  @override
  set selectedSpeechToTextMethod(String? _selectedSpeechToTextMethod) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedSpeechToTextMethod,
          _selectedSpeechToTextMethod,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get selectedAudioBackend => (super.noSuchMethod(
        Invocation.getter(#selectedAudioBackend),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedAudioBackend),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedAudioBackend),
        ),
      ) as String);

  @override
  set selectedAudioBackend(String? _selectedAudioBackend) => super.noSuchMethod(
        Invocation.setter(
          #selectedAudioBackend,
          _selectedAudioBackend,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get selectedVoice => (super.noSuchMethod(
        Invocation.getter(#selectedVoice),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedVoice),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.getter(#selectedVoice),
        ),
      ) as String);

  @override
  set selectedVoice(String? _selectedVoice) => super.noSuchMethod(
        Invocation.setter(
          #selectedVoice,
          _selectedVoice,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get voiceSpeed => (super.noSuchMethod(
        Invocation.getter(#voiceSpeed),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  set voiceSpeed(double? _voiceSpeed) => super.noSuchMethod(
        Invocation.setter(
          #voiceSpeed,
          _voiceSpeed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get autoToggleRecording => (super.noSuchMethod(
        Invocation.getter(#autoToggleRecording),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set autoToggleRecording(bool? _autoToggleRecording) => super.noSuchMethod(
        Invocation.setter(
          #autoToggleRecording,
          _autoToggleRecording,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get level => (super.noSuchMethod(
        Invocation.getter(#level),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set level(int? _level) => super.noSuchMethod(
        Invocation.setter(
          #level,
          _level,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Activity get currentActivity => (super.noSuchMethod(
        Invocation.getter(#currentActivity),
        returnValue: _FakeActivity_8(
          this,
          Invocation.getter(#currentActivity),
        ),
        returnValueForMissingStub: _FakeActivity_8(
          this,
          Invocation.getter(#currentActivity),
        ),
      ) as _i10.Activity);

  @override
  set currentActivity(_i10.Activity? _currentActivity) => super.noSuchMethod(
        Invocation.setter(
          #currentActivity,
          _currentActivity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get userInformation => (super.noSuchMethod(
        Invocation.getter(#userInformation),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#userInformation),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.getter(#userInformation),
        ),
      ) as String);

  @override
  set userInformation(String? _userInformation) => super.noSuchMethod(
        Invocation.setter(
          #userInformation,
          _userInformation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> loadUserInformation() => (super.noSuchMethod(
        Invocation.method(
          #loadUserInformation,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveUserInformation() => (super.noSuchMethod(
        Invocation.method(
          #saveUserInformation,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateUserInfo(Map<String, dynamic>? userInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserInfo,
          [userInfo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void updateCurrentActivity(_i10.Activity? activity) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentActivity,
          [activity],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i2.Mock implements _i17.AudioService {
  @override
  _i11.TextToSpeechOpenAI get tts => (super.noSuchMethod(
        Invocation.getter(#tts),
        returnValue: _FakeTextToSpeechOpenAI_9(
          this,
          Invocation.getter(#tts),
        ),
        returnValueForMissingStub: _FakeTextToSpeechOpenAI_9(
          this,
          Invocation.getter(#tts),
        ),
      ) as _i11.TextToSpeechOpenAI);

  @override
  set tts(_i11.TextToSpeechOpenAI? _tts) => super.noSuchMethod(
        Invocation.setter(
          #tts,
          _tts,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<double> get intensityStream => (super.noSuchMethod(
        Invocation.getter(#intensityStream),
        returnValue: _i4.Stream<double>.empty(),
        returnValueForMissingStub: _i4.Stream<double>.empty(),
      ) as _i4.Stream<double>);

  @override
  _i4.Stream<Exception> get errorStream => (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i4.Stream<Exception>.empty(),
        returnValueForMissingStub: _i4.Stream<Exception>.empty(),
      ) as _i4.Stream<Exception>);

  @override
  void initTTS(String? audioBackend) => super.noSuchMethod(
        Invocation.method(
          #initTTS,
          [audioBackend],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void initStreams() => super.noSuchMethod(
        Invocation.method(
          #initStreams,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deinitPlayer() => super.noSuchMethod(
        Invocation.method(
          #deinitPlayer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> initPlayer() => (super.noSuchMethod(
        Invocation.method(
          #initPlayer,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void initialize(
    String? audioBackend,
    String? selectedVoice,
    double? voiceSpeed,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            audioBackend,
            selectedVoice,
            voiceSpeed,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> playTextToSpeech(String? text) => (super.noSuchMethod(
        Invocation.method(
          #playTextToSpeech,
          [text],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool isPlaying() => (super.noSuchMethod(
        Invocation.method(
          #isPlaying,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool hasAudioToPlay() => (super.noSuchMethod(
        Invocation.method(
          #hasAudioToPlay,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double getCurrentIntensity() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentIntensity,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  String getSubtitles() => (super.noSuchMethod(
        Invocation.method(
          #getSubtitles,
          [],
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #getSubtitles,
            [],
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #getSubtitles,
            [],
          ),
        ),
      ) as String);

  @override
  void repeat() => super.noSuchMethod(
        Invocation.method(
          #repeat,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void next() => super.noSuchMethod(
        Invocation.method(
          #next,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setVoiceSpeed(double? voiceSpeed) => super.noSuchMethod(
        Invocation.method(
          #setVoiceSpeed,
          [voiceSpeed],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateVoice(String? selectedVoice) => super.noSuchMethod(
        Invocation.method(
          #updateVoice,
          [selectedVoice],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool lastAudioToPlay() => (super.noSuchMethod(
        Invocation.method(
          #lastAudioToPlay,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void toggleAutoPause() => super.noSuchMethod(
        Invocation.method(
          #toggleAutoPause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelOperations() => super.noSuchMethod(
        Invocation.method(
          #cancelOperations,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SessionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionService extends _i2.Mock implements _i18.SessionService {
  @override
  _i12.Isar get isar => (super.noSuchMethod(
        Invocation.getter(#isar),
        returnValue: _FakeIsar_10(
          this,
          Invocation.getter(#isar),
        ),
        returnValueForMissingStub: _FakeIsar_10(
          this,
          Invocation.getter(#isar),
        ),
      ) as _i12.Isar);

  @override
  _i4.Future<void> updateActivity(_i10.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateActivity,
          [activity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveSession(
    String? conversationLog,
    String? sessionSummary,
    DateTime? sessionStartTime,
    _i10.Activity? activity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [
            conversationLog,
            sessionSummary,
            sessionStartTime,
            activity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String> generateUserActivitySummary(
          _i10.Activity? currentActivity) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateUserActivitySummary,
          [currentActivity],
        ),
        returnValue: _i4.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #generateUserActivitySummary,
            [currentActivity],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #generateUserActivitySummary,
            [currentActivity],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<int> getLastSessionId() => (super.noSuchMethod(
        Invocation.method(
          #getLastSessionId,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> getLastSessionIdForActivity(_i10.ActivityId? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastSessionIdForActivity,
          [activityId],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<String> getAllConversationsFromActivityWithDetails(
    _i10.ActivityId? activityId,
    int? fromSessionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllConversationsFromActivityWithDetails,
          [
            activityId,
            fromSessionId,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #getAllConversationsFromActivityWithDetails,
            [
              activityId,
              fromSessionId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #getAllConversationsFromActivityWithDetails,
            [
              activityId,
              fromSessionId,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getAllConversationsWithDetails(
    int? fromSession,
    _i10.ActivityCategory? category,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllConversationsWithDetails,
          [
            fromSession,
            category,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #getAllConversationsWithDetails,
            [
              fromSession,
              category,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #getAllConversationsWithDetails,
            [
              fromSession,
              category,
            ],
          ),
        )),
      ) as _i4.Future<String>);
}
